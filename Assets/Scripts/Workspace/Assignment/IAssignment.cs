using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Assignment
{
    public interface IAssignment
    {
        #region Lecture

        void LCT01_SyntaxArray();

        void LCT02_ArrayInitialize();

        /// <summary>
        /// จงเขียนโปรแกรมเพื่อแสดงผลลัพธ์ตามที่กำหนด โดยใช้โครงสร้างการวนซ้ำ for loop
        ///
        /// for loop ที่ 1:
        /// - จะวนลูปทั้งหมด 10 ครั้ง โดยค่าของ i จะเริ่มต้นที่ 0 และเพิ่มขึ้นทีละ 1 จนถึงค่าน้อยกว่า 10
        /// - ในแต่ละรอบของลูป จะแสดงข้อความ "<![CDATA[<10 : ]]>" ตามด้วยค่าของ i ออกมาทาง Debug.Log
        /// - ให้ใช้ Debug.Log คั่นค่า
        ///
        /// ก่อนเริ่ม for loop ที่ 2 ให้พิมพ์ Debug.Log("======================");
        ///
        /// for loop ที่ 2:
        /// - จะวนลูปทั้งหมด 10 ครั้ง โดยค่าของ i จะเริ่มต้นที่ 1 และเพิ่มขึ้นทีละ 1 จนถึงค่าเท่ากับ 10
        /// - ในแต่ละรอบของลูป จะแสดงข้อความ "<![CDATA[<=10 : ]]>" ตามด้วยค่าของ i ออกมาทาง Debug.Log
        /// </summary>
        void LCT03_SyntaxLoop();

        /// <summary>
        /// จงเขียนโปรแกรมเพื่อแสดงรายชื่อชุดเกราะ Iron Man โดยใช้ Array และ for loop
        ///
        /// ====== Log by One incrementer ======
        /// for Loop ที่ 1:
        /// ค่า i เพิ่มขึ้น ที่ละ 1
        ///
        /// ====== Log by Two incrementer ======
        /// for Loop ที่ 2:
        /// ค่า i เพิ่มขึ้น ที่ละ 2
        ///
        /// ตัวอย่างผลลัพธ์:
        ///
        /// ====== Log by One incrementer ======
        /// Mark I
        /// Mark II
        /// Mark III
        /// Mark IV
        /// Mark V
        /// Mark VI
        /// Mark VII
        /// ====== Log by Two incrementer ======
        /// Mark I
        /// Mark III
        /// Mark V
        /// Mark VII
        /// </summary>
        /// <param name="ironManSuitNames">อาร์เรย์ของชื่อชุดเกราะ Iron Man</param>
        void LCT04_LoopAndArray(string[] ironManSuitNames);

        /// <summary>
        /// จงเขียนโปรแกรมภาษา C# เพื่อสร้างอาร์เรย์สองมิติ (2D array)
        /// ชื่อ my2DArray ที่มีขนาด 3 x 3 โดยมีค่าเริ่มต้นดังนี้:
        /// { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 }
        ///
        /// ตัวอย่างผลลัพธ์:
        /// 1 2 3 
        /// 4 5 6 
        /// 7 8 9 
        ///
        /// 2D Array (อาร์เรย์สองมิติ) คืออะไร
        /// อาร์เรย์สองมิติ หรือ 2D Array นั้นเปรียบเสมือนตารางที่มีทั้งแถวและคอลัมน์ โดยแต่ละช่องในตารางนั้นจะเก็บข้อมูลได้หนึ่งค่า คิดง่ายๆ เหมือนกับตารางใน Excel เลยครับ
        ///
        /// ทำไมต้องใช้ 2D Array?
        /// - จัดเก็บข้อมูลที่มีโครงสร้างเป็นตาราง: เหมาะสำหรับข้อมูลที่ต้องการจัดเรียงเป็นแถวและคอลัมน์ เช่น ตารางคะแนน, ตารางข้อมูลสินค้า, แผนที่ในเกม
        /// - เข้าถึงข้อมูลได้ง่าย: สามารถเข้าถึงข้อมูลในตำแหน่งใดๆ ได้โดยตรงโดยใช้ดัชนีของแถวและคอลัมน์
        ///
        /// ตัวอย่างการประกาศตัวแปร 2D Array หรืออาร์เรย์ 2 มิติ
        /// ยกตัวอย่าง 2D Array (อาร์เรย์ 2 มิติ) ที่มีการเก็บค่าดังนี้
        /// 1 2 3 4 5
        /// 1 2 3 4 5
        /// 1 2 3 4 5
        ///
        /// จากตัวอย่าง 2D Array นี้ สามารถกล่าวได้ว่า
        /// - มีขนาดในมิติที่ 1 เท่ากับ 3 หรือเราจะเรียกว่า array นี้มี 3 แถว หรือ 3 row
        /// - มีขนาดในมิติที่ 2 เท่ากับ 5 หรือเราจะเรียกว่า array นี้มี 5 หลัก หรือ 5 columns
        ///
        /// ถ้าจะประกาศตัวแปร 2D array ขนาด 3 แถว x 5 หลัก สามารถเขียน code ได้ดังนี้
        /// int[,] my2DArray = new int[3, 5];
        /// </summary>
        void LCT05_Syntax2DArray();

        /// <summary>
        /// จงเขียนโปรแกรมภาษา C# เพื่อเข้าถึงขนาดของ Array สองมิติ (2D array)
        /// โดยกำหนดมีตัวแปรให้ดังนี้
        /// 
        /// int[,] my2DArray = new int[3, 5] { 
        ///     { 1, 2, 3, 4, 5 }, 
        ///     { 1, 2, 3, 4, 5 }, 
        ///     { 1, 2, 3, 4, 5 } };
        /// 
        /// เมื่อเปรียบเทียบกับ 1D Array หรือ อาร์เรย์ 1 มิติ ซึ่งเราสามารถหาขนาดของ array โดยใช้ array.Length
        /// 
        /// เมื่อเราทำงานกับ 2D array เราก็สามารถหาขนาดของ array ได้เช่นกัน เพียงแต่เราจะต้องระบุว่าต้องการขนาดของมิติใดโดยใช้
        /// 
        /// function array.GetLength(0) เพื่อหาขนาดของมิติที่ 1 หรือจำนวนแถว (row)
        /// และ function array.GetLength(1) เพื่อหาขนาดของมิติที่ 2 หรือจำนวนหลัก (col)
        /// 
        /// เสร็จแล้วให้ Log ออกมาดังนี้
        /// Debug.Log($"rows = {rows}");
        /// Debug.Log($"cols = {cols}");
        /// </summary>
        void LCT06_SizeOf2DArray(int[,] my2DArray);

        /// <summary>
        /// จงเขียนโปรแกรมภาษา C# เพื่อแสดงผลลัพธ์ดังภาพต่อไปนี้ โดยใช้ Nested loop
        /// โดยกำหนดให้ มีตัวแปรดังนี้
        /// 
        /// public int columns = 3;
        /// public int rows = 4;
        /// 
        /// ตัวอย่างหน้าตาของ Nested Loop
        /// for (int i = 0; i < 4; i++)
        /// {
        ///     for (int j = 0; j < 3; j++)
        ///     {
        ///        
        ///     }
        /// }
        /// 
        /// ตัวอย่างการ run program:
        /// 
        /// Case 1
        /// Column ...
        /// 3
        /// Row ...
        /// 4
        /// ***
        /// ***
        /// ***
        /// ***
        /// 
        /// Case 2
        /// Column ...
        /// 10
        /// Row ...
        /// 1
        /// **********
        /// 
        /// Case 3
        /// Column ...
        /// 10
        /// Row ...
        /// 10
        /// **********
        /// **********
        /// **********
        /// **********
        /// **********
        /// **********
        /// **********
        /// **********
        /// **********
        /// **********
        /// 
        /// Nested Loop หรือ ลูปซ้อน คือ การนำลูปหนึ่งมาซ้อนอยู่ภายในอีกหนึ่งลูป ทำให้เกิดการวนซ้ำซ้อนกันหลายชั้น ลองนึกภาพเหมือนกล่องใส่กล่องอีกทีหนึ่ง ซึ่งกล่องชั้นในจะวนซ้ำหลายรอบก่อนที่กล่องชั้นนอกจะเปลี่ยนไปหนึ่งรอบ
        /// 
        /// ทำไมต้องใช้ Nested Loop?
        /// - จัดการข้อมูลหลายมิติ: เหมาะสำหรับข้อมูลที่จัดเรียงเป็นตาราง หรือมีโครงสร้างที่ซับซ้อน เช่น อาร์เรย์สองมิติ
        /// - สร้างรูปแบบที่ซ้ำซ้อน: ใช้สร้างรูปแบบต่างๆ เช่น ตารางสูตรคูณ, รูปทรงเรขาคณิต
        /// - แก้ปัญหาที่ซับซ้อน: สามารถนำไปใช้แก้ปัญหาที่ต้องทำการวนซ้ำหลายชั้น
        /// 
        /// ตัวอย่าง:
        /// สมมติว่าเราต้องการพิมพ์ตารางสูตรคูณตั้งแต่ 1 คูณ 1 ถึง 5 คูณ 5 เราสามารถใช้ Nested Loop ได้ดังนี้:
        /// 
        /// for (int i = 1; i <= 5; i++) // ลูปหลัก (วนซ้ำแถว)
        /// {
        ///     for (int j = 1; j <= 5; j++) // ลูปซ้อน (วนซ้ำคอลัมน์)
        ///     {
        ///         Console.Write(i * j + " ");
        ///     }
        ///     Console.WriteLine();
        /// }
        /// </summary>
        void LCT07_SyntaxNestedLoop(int columns, int rows);

        #endregion

        #region Assignment

        /// <summary>
        /// จงเขียนโปรแกรมเพื่อสุ่มการดรอปไอเท็ม
        /// จากรายการของไอเท็ม (GameObject[] items) ที่กำหนดให้ และสร้างวัตถุ (Instantiate) จากรายการที่ถูกเลือกสุ่มนั้น
        /// และพิมพ์ชื่อออกมาทางคอนโซล (field name)
        /// ตัวอย่างเช่น
        /// Debug.Log($"Got item: {go.name}");
        /// </summary>
        void AS01_RandomItemDrop(GameObject[] items);

        /// <summary>
        /// จงเขียนโปรแกรมใน Unity C# เพื่อสร้างแผนที่ 2D โดยใช้ Nested Loop
        /// กำหนดขนาด: กำหนดจำนวนคอลัมน์ (columns) และจำนวนแถว (rows) ของพื้นที่เล่น
        /// โดยกำหนดให้ มีตัวแปรดังนี้
        /// public int columns = 5;
        /// public int rows = 5;
        /// 
        /// สร้างวัตถุแบบสุ่ม: เลือกวัตถุพื้น (floorTiles) จากอาร์เรย์แบบสุ่มในแต่ละตำแหน่ง โดยกำหนดให้ มีตัวแปรดังนี้
        /// public GameObject[] floorTiles;
        /// 
        /// โดยที่เมื่อ program run ระบบจะกำหนดค่าใน array มาให้ 3 GameObject โดยแต่ละ GameObject มีชื่อดังนี้
        /// 1 แทนพื้นแบบที่ 1
        /// 2 แทนพื้นแบบที่ 2
        /// 0 แทนพื้นธรรมดา
        /// 
        /// วางวัตถุ: วางวัตถุที่เลือกไว้ในตำแหน่งที่กำหนด โดยใช้ฟังก์ชัน Instantiate และกำหนดตำแหน่งผ่าน index ของ X Y ลงใน Vector2
        /// GameObject tile = Instantiate(obj, new Vector2(x, y), transform.rotation);
        /// 
        /// และให้พิมพ์ชื่อของ GameObject tile ออกมาเพื่อแสดง pattern ของ map ที่ random สุ่มพื้นออกมาได้ ด้วย code
        /// Console.Write(tile.name);
        /// 
        /// ตัวอย่างผลลัพธ์:
        /// 
        /// Case 1: สร้าง map ขนาด 3x3 และสุ่มพื้นได้เป็น pattern
        /// Column ...
        /// 3
        /// Row ...
        /// 3
        /// 211
        /// 110
        /// 000
        /// 
        /// Case 2: สร้าง map ขนาด 10x10 และสุ่มพื้นได้เป็น pattern
        /// Column ...
        /// 10
        /// Row ...
        /// 10
        /// 0100221122
        /// 2011120022
        /// 0210021000
        /// 2010112011
        /// 2001101221
        /// 0002200210
        /// 1221002122
        /// 2001102001
        /// 2200122110
        /// 1101112120
        /// </summary>
        void AS02_NestedLoopForCreate2DMap(GameObject[] floorTiles, int columns, int rows);

        /// <summary>
        /// จงเขียนโปรแกรมใน Unity C# เพื่อสร้างกำแพงรอบนอก โดยใช้ Nested Loop
        /// กำหนดขนาด: กำหนดจำนวนคอลัมน์ (columns) และจำนวนแถว (rows) ของพื้นที่เล่น
        /// โดยกำหนดให้มีตัวแปรดังนี้
        /// 
        /// public int columns = 5;
        /// public int rows = 5;
        /// 
        /// สร้างวัตถุกำแพง: (Wall) ในตัวแปร GameObject
        /// โดยกำหนดให้มีตัวแปรดังนี้
        /// 
        /// public GameObject wall;
        /// 
        /// ซึ่งเมื่อโปรแกรมเริ่ม ระบบจะกำหนดให้ GameObject wall มีชื่อ "*"
        /// 
        /// วางกำแพง: ไว้ในตำแหน่ง X -1 : Y -1 และ columns +1 : rows +1 โดยใช้ฟังก์ชัน Instantiate และกำหนดตำแหน่งผ่าน index ของ X Y ลงใน Vector2
        /// if (x == 0 || x == columns - 1 || y == 0 || y == rows - 1) {
        ///     Instantiate(wall, new Vector2(x, y), transform.rotation);
        /// }
        /// 
        /// ซึ่งจากเงื่อนไขดังกล่าว Pattern และเงื่อนไขของการวางตำแหน่งกำแพงจะมี 4 รูปแบบ กำหนดให้ x แทน index ของ Column และ y แทน index ของ Row
        /// - ไว้ในตำแหน่งขอบบนสุด หรือ Row แรก => y == 0
        /// - ไว้ในตำแหน่งขอบล่างสุด หรือ row สุดท้าย => y == rows - 1
        /// - ไว้ในตำแหน่งขอบซ้ายสุด หรือ Column แรก => x == 0
        /// - ไว้ในตำแหน่งขวาสุด หรือ Column สุดท้าย => x == columns - 1
        /// 
        /// ตัวอย่างผลลัพธ์:
        /// 
        /// Case 1
        /// Column ...
        /// 5
        /// Row ...
        /// 3
        /// *******
        /// *     *
        /// *     *
        /// *     *
        /// *******
        /// 
        /// Case 2
        /// Column ...
        /// 3
        /// Row ...
        /// 5
        /// *****
        /// *   *
        /// *   *
        /// *   *
        /// *   *
        /// *   *
        /// *****
        /// 
        /// Case 3
        /// Column ...
        /// 10
        /// Row ...
        /// 4
        /// ************
        /// *          *
        /// *          *
        /// *          *
        /// *          *
        /// ************
        /// 
        /// Case 4 - กรณีพิเศษกำแพงวางล้อมแบบไม่มีช่องว่างตรงกลางเลย
        /// Column ...
        /// 2
        /// Row ...
        /// 2
        /// ****
        /// *  *
        /// *  *
        /// ****
        /// 
        /// ตรวจสอบขอบ:
        /// if (x == 0 || x == columns - 1 || y == 0 || y == rows - 1) เป็นเงื่อนไขที่ตรวจสอบว่าตำแหน่งปัจจุบัน (x, y) อยู่ที่ขอบของพื้นที่หรือไม่
        /// columns และ rows เป็นตัวแปรที่กำหนดขนาดของพื้นที่เล่น
        /// x == 0 หรือ x == columns - 1 ตรวจสอบว่าตำแหน่งอยู่ที่ขอบซ้ายหรือขวา
        /// y == 0 หรือ y == rows - 1 ตรวจสอบว่าตำแหน่งอยู่ที่ขอบบนหรือล่าง
        /// </summary>
        void AS03_NestedLoopForMakingWallAround(GameObject wall, int columns, int rows);

        /// <summary>
        /// ให้นักศึกษาเขียนโปรแกรมเพื่อโจมตีเป้าหมายดังนี้
        /// ตัวแปรที่เกี่ยวข้อง
        /// public int[] enemyHP; array ที่เก็บ hp ของ enemy
        /// public int damage; จำนวน damage ที่ user ระบุ 
        /// public int target; target index ของ enemy
        /// 
        /// รูปแบบที่ 1 โจมตีตัวแรกในรายการ
        /// เมื่อผู้ใช้ใส input Damage เข้ามา จะโจมตีตัวแรกเสมอ แล้วให้พิมพ์ FirstEnemy hp :<hp ที่เหลือ> 
        /// รูปแบบที่ 2 โจมตีตัวสุดท้ายในรายการ
        /// เมื่อผู้ใช้ใส input Damage เข้ามา จะโจมตีตัวสุดท้ายเสมอ  แล้วให้พิมพ์ LastEnemy hp :<hp ที่เหลือ> 
        /// รูปแบบที่ 3 โจมตีตัวเป้าหมายที่กำหนด
        /// เมื่อผู้ใช้ใส่ input Damage เข้ามา และ input เลือกเป้าหมายที่จะโจมตีด้วย index ของ array จากนั้นทำการโจมตีเป้าหมายที่ต้องการ  แล้วให้พิมพ์ TargetEnemy <target> hp :<hp ที่เหลือ> 
        /// 
        /// โดยที่ Program จะทำการ Attack เรียงจากรูปแบบที่ 1, 2 และ 3 ตามลำดับ
        /// 
        /// ตัวอย่างผลลัพธ์
        /// FirstEnemy hp :8
        /// LastEnemy hp :8
        /// TargetEnemy 3 hp :8
        /// </summary>
        /// <param name="enemyHP">array ที่เก็บ hp ของ enemy</param>
        /// <param name="damage"></param>
        /// <param name="target"></param>
        void AS04_AttackEnemy(int[] enemyHP, int damage, int target);

        /// <summary>
        /// จงเขียนโปรแกรมเพื่อสร้าง for ลูป จาก 0 - (n-1)
        /// โดยกำหนดให้ n รับค่าจากผู้ใช้
        /// ให้ n รับค่าจำนวนเต็มจากช่องป้อนข้อมูล inputField
        /// สร้างลูปซ้ำ ที่จะวนซ้ำจำนวนครั้งที่ผู้ใช้กำหนดในค่า n
        /// แสดงผลลัพธ์เป็นตัวเลขที่เพิ่มขึ้นทีละ 1 เริ่มจาก 0 จนถึงค่า n-1
        /// ตัวอย่าง: ถ้าผู้ใช้ป้อนค่า 5 ลงใน inputField ผลลัพธ์ที่ได้จะแสดงใน Debug Log ดังนี้:
        /// 0
        /// 1
        /// 2
        /// 3
        /// 4
        /// </summary>
        /// <param name="n">ค่าจำนวนเต็มที่รับจาก inputField</param>
        void AS05_DynamicIterationLoop(int n);

        /// <summary>
        /// จงเขียนโปรแกรมเพื่อแสดงรายชื่อชุดเกราะ Iron Man โดยใช้ Array และ while loop
        /// ให้รับอาร์เรย์ของสตริงที่เก็บชื่อชุดเกราะ เช่น:
        /// [
        ///     "Mark I",
        ///     "Mark II",
        ///     "Mark III",
        ///     "Mark IV",
        ///     "Mark V",
        ///     "Mark VI",
        ///     "Mark VII"
        /// ]
        ///
        /// ทำสองรูปแบบโดยใช้ while loop:
        /// ======Log by One======
        /// while Loop ที่ 1:
        /// - ให้ตัวนับ i เริ่มที่ 0 และเพิ่มครั้งละ 1 (i += 1)
        /// - พิมพ์ค่าจากอาร์เรย์ตามลำดับ index 0, 1, 2, 3, ...
        ///
        /// ======Log by Two======
        /// while Loop ที่ 2:
        /// - ให้ตัวนับ i เริ่มที่ 0 และเพิ่มครั้งละ 2 (i += 2)
        /// - พิมพ์ค่าจากอาร์เรย์ตาม index 0, 2, 4, 6, ...
        ///
        /// ตัวอย่างผลลัพธ์:
        /// ======Log by One======
        /// Mark I
        /// Mark II
        /// Mark III
        /// Mark IV
        /// Mark V
        /// Mark VI
        /// Mark VII
        /// ======Log by Two======
        /// Mark I
        /// Mark III
        /// Mark V
        /// Mark VII
        /// </summary>
        void AS06_WhileLoopAndArray(string[] ironManSuitNames);

        /// <summary>
        /// ให้นักศึกษาเขียนโปรแกรมเพื่อ Heal เป้าหมายดังนี้
        /// ตัวแปรที่เกี่ยวข้อง
        /// 
        /// public int[] heroHPs; // array ที่เก็บ hp ของ hero
        /// public int heal; // จำนวน heal ที่ user ระบุ
        /// public int targetIndex; // target index ของ hero
        /// 
        /// รูปแบบที่ 1 Heal ตัวแรกในรายการ
        /// เมื่อผู้ใช้ใส่ input Heal เข้ามา จะ Heal ตัวแรกเสมอ แล้วให้พิมพ์ FirstHero hp :<hp หลังจาก heal แล้ว>
        /// 
        /// รูปแบบที่ 2 Heal ตัวสุดท้ายในรายการ
        /// เมื่อผู้ใช้ใส่ input Heal เข้ามา จะ Heal ตัวสุดท้ายเสมอ แล้วให้พิมพ์ LastHero hp :<hp หลังจาก heal แล้ว>
        /// 
        /// รูปแบบที่ 3 Heal ตัวเป้าหมายที่กำหนด
        /// เมื่อผู้ใช้ใส่ input Heal เข้ามา และ input เลือกเป้าหมายที่จะ heal ด้วย index ของ array จากนั้นทำการ heal เป้าหมายที่ต้องการ แล้วให้พิมพ์ TargetHero <targetIndex> hp :<hp หลังจาก Heal แล้ว>
        /// 
        /// โดยที่ Program จะทำการ Heal เรียงจากรูปแบบที่ 1, 2 และ 3 ตามลำดับ
        /// 
        /// ตัวอย่างผลลัพธ์
        /// FirstHero hp :8
        /// LastHero hp :8
        /// TargetHero 3 hp :8
        /// </summary>
        /// <param name="heroHPs">array ที่เก็บ hp ของ hero</param>
        /// <param name="heal">จำนวน heal ที่ user ระบุ</param>
        /// <param name="targetIndex">target index ของ hero</param>
        void AS07_HealTargetAtIndex(int[] heroHPs, int heal, int targetIndex);

        /// <summary>
        /// จงเขียนโปรแกรมเพื่อสร้างระบบบทสนทนาที่แสดงข้อความแบบสุ่มจากชุดข้อความที่กำหนดไว้
        /// โดยกำหนดให้
        /// ตัวแปร:
        /// dialogues: เป็น Array ที่เก็บชุดข้อความบทสนทนาทั้งหมด
        /// r: เป็นตัวแปรชนิด int ใช้สำหรับเก็บค่าสุ่มเพื่อเลือกข้อความ
        /// และแสดงผลข้อความออกมาทางหน้าจอ
        /// ตัวอย่าง การใช้ function Random
        /// int r = UnityEngine.Random.Range(0, dialogues.Length);
        /// สังเกตว่าจะต้องใส่ UnityEngine.Random แทนที่จะใช้ Random ได้เลย เนื่องจากว่าบางครั้งใน code มีการประกาศ using System; และ using UnityEngine; ไว้ทั้งคู่ ซึ่งทั้ง 2 namespace จะมี class Random อยู่ด้วยกันทั้งคู่ ทำให้ compile สับสนว่าจะใช้ Random จาก namespace ใด การระบุไปแบบแน่ชัดเลยว่าเป็น Random จาก UnityEngine โดยใช้ UnityEngine.Random เพื่อหลีกเลี่ยงปัญหานี้
        /// 
        /// ตัวอย่างผลลัพธ์
        /// 
        /// พูดคุยกับ NPC
        /// 
        /// คุณเป็นอย่างไรบ้างครับ
        /// </summary>
        /// <param name="dialogues">Array ที่เก็บชุดข้อความบทสนทนาทั้งหมด</param>
        void AS08_RandomPickingDialogue(string[] dialogues);

        /// <summary>
        /// จงเขียนโปรแกรมเพื่อสร้างตารางสูตรคูณ จาก 1 - 12
        /// โดยให้ผู้ใช้ป้อนจำนวนนั้นเข้ามาในช่อง inputField และแสดงผลลัพธ์ออกมาในรูปแบบของสูตรคูณ เช่น "5x1=5", "5x2=10", ...
        /// โดยไล่จาก 1 - 12
        /// และ Log ค่าออกมาดังนี้
        /// 5x1=5
        /// 5x2=10
        /// 5x3=15
        /// 5x4=20
        /// 5x5=25
        /// 5x6=30
        /// 5x7=35
        /// 5x8=40
        /// 5x9=45
        /// 5x10=50
        /// </summary>
        /// <param name="n">จำนวนที่ต้องการสร้างตารางสูตรคูณ</param>
        void AS09_MultiplicationTable(int n);

        /// <summary>
        /// จงเขียนโปรแกรมเพื่อหาผลรวมของจำนวนเต็มตั้งแต่ 1 ถึงจำนวนที่ผู้ใช้ป้อน โดยใช้ while loop
        /// กำหนดตัวแปร:
        /// sum: ใช้เก็บผลรวมของจำนวนเต็ม
        /// i: ใช้เป็นตัวนับในการวนลูป
        /// n: เก็บค่าจำนวนเต็มที่ผู้ใช้ป้อนเข้ามา
        /// วนลูป:
        /// เงื่อนไข: วนลูปจะทำงานต่อไปตราบใดที่ค่าของ i น้อยกว่าหรือเท่ากับ n
        /// บวกสะสม: ในแต่ละรอบของลูป ค่าของ i จะถูกบวกเข้าไปใน sum ทำให้ sum เก็บผลรวมของจำนวนเต็มทั้งหมดที่วนลูปมาแล้ว
        /// เพิ่มค่าตัวนับ: ค่าของ i จะถูกเพิ่มขึ้น 1 เพื่อเตรียมสำหรับการวนลูปรอบถัดไป
        /// เมื่อผู้ใช้ใส่เลข 5
        ///
        /// ตัวอย่างผลลัพธ์:
        ///
        /// ผลรวมของ n จาก 1 ถึง 5 คือ 15
        /// </summary>
        /// <param name="n">จำนวนเต็มที่ผู้ใช้ป้อนเข้ามา</param>
        void AS10_FindSummationFromZeroToNUsingWhileLoop(int n);

        /// <summary>
        /// จงเขียนโปรแกรมเพื่อสร้างศัตรูหลายตัวตามจำนวนและตำแหน่งที่กำหนด โดยมีเงื่อนไขดังนี้:
        /// 
        /// สร้างตัวแปร: สร้างตัวแปร Enemy ที่เป็นชนิด GameObject เพื่อเก็บข้อมูลของศัตรูที่จะสร้าง และสร้างตัวแปร HpEnemy ที่เป็นชนิด int[] เพื่อเก็บค่า HP ของศัตรูแต่ละตัว
        /// วนลูปสร้างศัตรู:
        /// ใช้ for loop เพื่อวนลูปสร้างศัตรูตามจำนวนที่กำหนดในอาร์เรย์ HpEnemy
        /// ในแต่ละรอบของลูป ให้สร้างศัตรูหนึ่งตัวโดยใช้ Instantiate โดยกำหนดตำแหน่งของศัตรูให้ห่างจากตำแหน่งปัจจุบันของวัตถุที่ติด script นี้ไปตามแกน X เป็นระยะทางที่เพิ่มขึ้นทีละ 1 หน่วยในแต่ละรอบ
        /// กำหนดให้รอบที่ 1 หรือ i == 0 ให้ enemy อยู่ในตำแหน่งที่ x = 1
        /// และรอบที่ 2 หรือ i == 1 ให้ enemy อยู่ในตำแหน่งที่ x = 2
        /// และรอบที่ 3 หรือ i == 2 ให้ enemy อยู่ในตำแหน่งที่ x = 3
        /// ...
        /// และรอบที่ n หรือ i == n-1 ให้ enemy อยู่ในตำแหน่งที่ x = n
        /// แสดงผล: เมื่อรันโปรแกรม จะต้องเห็นศัตรูหลายตัวถูกสร้างขึ้นมาเรียงกันตามตำแหน่งที่กำหนด
        /// </summary>
        /// <param name="enemyHPs">อาร์เรย์ของ HP ศัตรูแต่ละตัว</param>
        /// <param name="enemyPrefab">Prefab ของศัตรู</param>
        void AS11_SpawnEnemies(int[] enemyHPs, GameObject enemyPrefab);

        /// <summary>
        /// </summary>
        IEnumerator AS12_CountTime(float CountTime);

        /// <summary>
        /// ให้นักศึกษาเขียนโปรแกรมเพื่อหาผลรวมของตัวเลขใน Row (แถว)
        /// 
        /// https://cdn-api.elice.io/api-attachment/attachment/8a7f0bbcdbd54117bef5a8742d99496c/image.png
        /// 
        /// โดยกำหนดให้ มีตัวแปรดังนี้
        /// 
        /// public int[,] matrix = {
        ///     { 1, 2, 3 }, 
        ///     { 4, 5, 6 }, 
        ///     { 7, 8, 9 } };
        /// 
        /// โดยให้ใช้ for เพื่อหาผลรวมของตัวเลขใน Row ที่ระบุโดยตัวแปร public int row;
        /// และเข้าถึงขนาดของ column โดยใช้คำสั่ง matrix.GetLength(1)
        /// 
        /// ตัวอย่างผลลัพธ์:
        /// 
        /// Case 1 - ผลรวมของ Row #0 = 1 + 2 + 3
        /// Row ...
        /// 0
        /// 6
        /// 
        /// Case 2 - ผลรวมของ Row #1 = 4 + 5 + 6
        /// Row ...
        /// 1
        /// 15
        /// 
        /// Case 3 - ผลรวมของ Row #2 = 7 + 8 + 9
        /// Row ...
        /// 2
        /// 24
        /// 
        /// การเข้าถึงขนาดของ 2D Array
        /// matrix.GetLength(1): ใช้เพื่อหาจำนวนคอลัมน์ในอาร์เรย์ matrix โดยที่ 1 หมายถึงมิติที่สอง (คอลัมน์)
        /// matrix.GetLength(0): ใช้เพื่อหาจำนวนแถวในอาร์เรย์ matrix โดยที่ 0 หมายถึงมิติแรก (แถว)
        /// </summary>
        /// <param name="matrix">2D array ที่เก็บตัวเลข</param>
        /// <param name="row">แถวที่ต้องการหาผลรวม</param>
        void AS13_SumOfNumbersInRow(int[,] matrix, int row);
        /// <summary>
        /// ให้นักศึกษาเขียนโปรแกรมเพื่อหาผลรวมของคอลัมน์
        /// 
        /// https://cdn-api.elice.io/api-attachment/attachment/1f5f0b4e6ee64c4f8040b43685c8a6f5/image.png
        /// 
        /// โดยกำหนดให้ มีตัวแปรดังนี้
        /// 
        /// public int[,] matrix = {
        ///     { 1, 2, 3 }, 
        ///     { 4, 5, 6 }, 
        ///     { 7, 8, 9 } };
        /// 
        /// โดยให้ใช้ for เพื่อรวมผลลัพธ์และเข้าถึงขนาดของแถวโดยใช้คำสั่ง matrix.GetLength(0)
        /// 
        /// ตัวอย่างผลลัพธ์:
        /// 
        /// Case 1: ผลรวมของตัวเลขใน Column #0 = 1 + 4 + 7 = 12
        /// Col ...
        /// 0
        /// 12
        /// 
        /// Case 2: ผลรวมของตัวเลขใน Column #1 = 2 + 5 + 8 = 15
        /// Col ...
        /// 1
        /// 15
        /// 
        /// Case 3: ผลรวมของตัวเลขใน Column #2 = 3 + 6 + 9 = 18
        /// Col ...
        /// 2
        /// 18
        /// 
        /// การเข้าถึงขนาดของ 2D Array
        /// myArray.GetLength(1): ใช้เพื่อหาจำนวนคอลัมน์ในอาร์เรย์ myArray โดยที่ 1 หมายถึงมิติที่สอง (คอลัมน์)
        /// myArray.GetLength(0): ใช้เพื่อหาจำนวนแถวในอาร์เรย์ myArray โดยที่ 0 หมายถึงมิติแรก (แถว)
        /// </summary>
        /// <param name="matrix">2D array ที่เก็บตัวเลข</param>
        /// <param name="column">คอลัมน์ที่ต้องการหาผลรวม</param>
        void AS14_SumOfNumbersInColumn(int[,] matrix, int column);

        /// <summary>
        /// จงเขียนโปรแกรมใน C# เพื่อแสดงวิธีคิดของการสร้างแผนที่ 3 เหลี่ยม โดยใช้ nested loop
        /// โดยมีตัวแปรดังนี้ :
        /// int size = 5;
        /// 
        /// ลูปภายนอกควบคุมจำนวนแถว โดยเริ่มที่แถวที่ 1 และสิ้นสุดที่แถวที่ size
        /// for (int i = 1; i <= size; i++)
        /// 
        /// ลูปภายในควบคุมจำนวนดาวในแต่ละแถว โดยจำนวนดาวจะเพิ่มขึ้นตามหมายเลขแถว :
        /// for (int j = ???????)
        /// 
        /// พิมพ์อักขระ "*" ออกมา แทนการ Instantiate
        /// Debug.Log("*");
        /// 
        /// ขึ้นบรรทัดใหม่ แทนการเลื่อนตำแหน่ง Y
        /// Console.WriteLine()
        /// 
        /// ตัวอย่างผลลัพธ์:
        /// 
        /// Size ...
        /// 5
        /// *
        /// **
        /// ***
        /// ****
        /// *****
        /// 
        /// Size ...
        /// 10
        /// *
        /// **
        /// ***
        /// ****
        /// *****
        /// ******
        /// *******
        /// ********
        /// *********
        /// **********
        /// </summary>
        /// <param name="size">ความสูงของรูปสามเหลี่ยม</param>
        void AS15_MakeTheTriangle(int size);

        /// <summary>
        /// จงเขียนโปรแกรมภาษา C# เพื่อแสดงตารางสูตรคูณ ตั้งแต่ 2 คูณ 1 ถึง 12 ไปจนถึง 4 คูณ 1 ถึง 12 โดยใช้ Nested Loop
        /// ใช้ \t เพื่อเว้นวรรคแท็บระหว่าง column (และในแต่ละบรรทัดจะต้องไม่ลงท้ายด้วย \t) เช่น
        ///
        /// 2 x 1 = 2\t3 x 1 = 3\t4 x 1 = 4   (สังเกตุว่าจะไม่มี \t ตามท้าย)
        /// 
        /// Debug.Log("\t")
        /// หรือ line += "\t";
        /// 
        /// ตัวอย่างผลลัพธ์:
        /// 
        /// 2 x 1 = 2       3 x 1 = 3       4 x 1 = 4
        /// 2 x 2 = 4       3 x 2 = 6       4 x 2 = 8
        /// 2 x 3 = 6       3 x 3 = 9       4 x 3 = 12
        /// 2 x 4 = 8       3 x 4 = 12      4 x 4 = 16
        /// 2 x 5 = 10      3 x 5 = 15      4 x 5 = 20
        /// 2 x 6 = 12      3 x 6 = 18      4 x 6 = 24
        /// 2 x 7 = 14      3 x 7 = 21      4 x 7 = 28
        /// 2 x 8 = 16      3 x 8 = 24      4 x 8 = 32
        /// 2 x 9 = 18      3 x 9 = 27      4 x 9 = 36
        /// 2 x 10 = 20     3 x 10 = 30     4 x 10 = 40
        /// 2 x 11 = 22     3 x 11 = 33     4 x 11 = 44
        /// 2 x 12 = 24     3 x 12 = 36     4 x 12 = 48
        /// </summary>
        void AS16_MultiplicationTableOf_2_3_and_4();

        #endregion

        #region EXTRA Assignment

        /// <summary>
        /// จงเขียนโปรแกรมจำลองเกม TicTacToe (XO)
        /// กำหนดให้มีตัวแปร board : ขนาด 3x3 เท่านั้น
        /// public static char[,] board = new char[3, 3] {
        /// {' ', ' ', ' '},
        /// {' ', ' ', ' '},
        /// {' ', ' ', ' '}
        /// };
        /// 
        /// โดย AS11_TicTacToeGame_TurnPlay จะรับ 3 ตัวแปรคือ
        /// + player: ระบุว่าในตานี้เป็นของผู้เล่นฝ่ายไหน "X" หรือ "O" X 
        /// + row, column เป็นการระบุตำแหน่งที่ผู้เล่นตานี้เลือกจะลงใน board เช่น row=0, column=1
        /// โดยที่ method นี้จะต้องพิมพ์ ตารางหลังจากใส่ค่าออกมา 
        /// และแสดงว่าผลลัพธ์การเล่นตานั้นเกิดอะไรขึ้น ซึ่งจะมีความเป็นไปได้ทั้งหมด 5 รูปแบบคือ
        /// -> ">> X Win!" เมื่อ player "X" ลงตานี้แล้วขนะ
        /// -> ">> O Win!" เมื่อ player "O" ลงตานี้แล้วขนะ
        /// -> ">> Draw" เมื่อผู้เล่น X หรือ O ลงไปแล้วไม่มีผู้ชนะ
        /// -> ">> Continue" เมื่อผู้เล่น X หรือ O ลงไปแล้วเกมยังไม่จบ - ไม่มีผู้ชนะ และยังเหลือช่องว่างให้ผู้เล่นอีกคนลงต่อได้
        /// -> ">> Invalid move" เมื่อผู้เล่น X หรือ O เลือกลงไปในช่องที่ไม่ว่าง หรือไม่มีอยู่จริงเข่น row=1000 column=1999
        /// 
        /// Input
        /// board:
        /// -------------
        /// |   | X |   |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// player: "X"
        /// row: 0
        /// column: 1
        /// 
        /// Output
        /// -------------
        /// |   | X |   |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// >> Continue
        /// 
        /// Input
        /// board:
        /// -------------
        /// |   | X |   |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// Player: "O"
        /// row: 1
        /// col: 1
        /// 
        /// Output:
        /// -------------
        /// |   | X |   |
        /// -------------
        /// |   | O |   |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// >> Continue
        /// 
        /// NOTE การพิมพ์ตารางให้ระวังเรื่อง space ให้ดี
        /// 
        /// โดยหากช่องนั้นไม่ว่างให้ (Invalid input) ให้พิมพ์ออกมาว่าไม่สามารถลงในตำแหน่งที่ต้องการได้ cannot set X at 0 2 และวนกลับไปให้เซตค่าใหม่
        /// 
        /// Input
        /// board: 
        /// -------------
        /// | X |   | O |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// Player: O
        /// row: 0
        /// column: 2
        /// 
        /// Output
        /// -------------
        /// | X |   | O |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// |   |   |   |
        /// -------------
        /// >> Invalid move
        /// 
        /// หลังจากการลงในแต่ละตา ระบบเกมจะต้อง check ว่า ใครเป็นฝ่ายชนะ เช่น
        /// 
        /// Input
        /// board:
        /// -------------
        /// | X | X |   |
        /// -------------
        /// | X | O |   |
        /// -------------
        /// | O |   |   |
        /// -------------
        /// player: O
        /// row: 2
        /// column: 0
        /// 
        /// Output
        /// -------------
        /// | X | X | O |
        /// -------------
        /// | X | O |   |
        /// -------------
        /// | O |   |   |
        /// -------------
        /// >> O wins!
        /// 
        /// Input
        /// board:
        /// -------------
        /// | X |   | O |
        /// -------------
        /// |   |   | O |
        /// -------------
        /// |   |   | X |
        /// -------------
        /// Player: X
        /// row: 2
        /// column: 2
        /// 
        /// Output
        /// -------------
        /// | X |   | O |
        /// -------------
        /// |   | X | O |
        /// -------------
        /// |   |   | X |
        /// -------------
        /// >> X wins!
        /// 
        /// และถ้าลงจนครบทุกช่องแล้วไม่มีผู้ชนะ ให้พิมพ์ว่า Draw!
        /// 
        /// Input
        /// board:
        /// -------------
        /// | X | X | O |
        /// -------------
        /// | O | O | X |
        /// -------------
        /// | X |   | X |
        /// -------------
        /// Player: O
        /// row: 2
        /// column: 1
        /// 
        /// Output
        /// -------------
        /// | X | X | O |
        /// -------------
        /// | O | O | X |
        /// -------------
        /// | X | O | X |
        /// -------------
        /// >> Draw
        /// 
        /// Input
        /// board:
        /// -------------
        /// | X | X | O |
        /// -------------
        /// | O | O | X |
        /// -------------
        /// | X | O |   |
        /// -------------
        /// Player: X
        /// row: 2
        /// column: 2
        /// 
        /// Output
        /// -------------
        /// | X | X | O |
        /// -------------
        /// | O | O | X |
        /// -------------
        /// | X | O | X |
        /// -------------
        /// >> Draw
        /// 
        /// </summary>
        /// <param name="board">กระดาน Tic Tac Toe</param>
        /// <param name="playerTurn">ตาของผู้เล่น X หรือ O</param>
        /// <param name="row">แถวที่ต้องการเล่น</param>
        /// <param name="column">คอลัมน์ที่ต้องการเล่น</param>
        void EX_01_TicTacToeGame_TurnPlay(string[,] board, string playerTurn, int row, int column);

        #endregion
    }
}
